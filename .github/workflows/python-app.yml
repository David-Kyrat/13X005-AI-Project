# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: install make
        run: |
          sudo apt install make
      # Use make + script to automatically install poetry
      # - name: Setup Poetry
      #   # You may pin to the exact commit or the version.
      #   # uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844
      #   uses: Gr1N/setup-poetry@v8
      #   #with:
      #     # Allow to install prerelease versions of Poetry
      #     # poetry-preview: # optional, default is false
      #     # Poetry version to use, if version is not provided then latest stable version will be used
      #     # poetry-version: # optional
      - name: Install poetry & deps
        run: |
          make check_dep
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Lint with ruff
        run: 
            poetry run ruff . --config pyproject.toml --exit-zero

      - name: Test with pytest
        run: |
          make test
          # pytest src/*.py

